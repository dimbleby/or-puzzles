#!/bin/env python
from ortools.sat.python import cp_model


def constrain_line(model, line, clues):
    """Constrain a line so that it satisfies the description of it in the clues"""
    # We're going to advance through a state machine.  Create some helpful labels to
    # help track this.  Eg clues [2, 3, 2] -> labels [0, 1, 1, 0, 1, 1, 1, 0, 1, 1].
    labels = []
    for clue in clues:
        labels.append(0)
        labels.extend([1] * clue)

    # Wrinkle: when we have no clues, we have a single state.
    if not labels:
        labels = [0]

    # We must go all the way from the start to the end.
    initial_state = 0
    final_state = len(labels) - 1

    # Construct the valid transitions: given state and input, what's the next state?
    #
    # - in the final state, a blank is acceptable and leaves us still in the final state
    #
    # - else if we're on a blank then another blank leaves us where we are, while
    #   filling a square moves us along
    #
    # - else (we're on a filled square) we're only allowed to move along if we get the
    #   appropriate input.
    transitions = {}
    for (state, label) in enumerate(labels):
        if state == final_state:
            transitions[state, 0] = state
        elif label == 0:
            transitions[state, 0] = state
            transitions[state, 1] = state + 1
        else:
            next_label = labels[state + 1]
            transitions[state, next_label] = state + 1

    # Add the constraint to the model.
    tuples = [(old, filled, new) for ((old, filled), new) in transitions.items()]
    model.AddAutomaton(line, initial_state, [final_state], tuples)


def solve_puzzle(row_clues, column_clues, givens):
    """Solve a puzzle"""
    # Discard pointless clues.
    row_clues = [[clue for clue in clues if clue > 0] for clues in row_clues]
    column_clues = [[clue for clue in clues if clue > 0] for clues in column_clues]

    # Count rows and columns.
    num_rows = len(row_clues)
    num_columns = len(column_clues)

    # Prepare a model.
    model = cp_model.CpModel()

    # squares[i, j]: is square i,j filled in?
    squares = {
        (i, j): model.NewBoolVar("squares_{i}_{j}".format(i=i, j=j))
        for i in range(num_rows)
        for j in range(num_columns)
    }

    # Given clues are given.
    for (i, j) in givens:
        model.Add(squares[i, j] == 1)

    # Row constraints must be satisfied.
    for (i, clues) in enumerate(row_clues):
        line = [squares[i, j] for j in range(num_columns)]
        constrain_line(model, line, clues)

    # Column constraints must be satisfied.
    for (j, clues) in enumerate(column_clues):
        line = [squares[i, j] for i in range(num_rows)]
        constrain_line(model, line, clues)

    # Find a solution.
    solver = cp_model.CpSolver()
    solved = solver.Solve(model)

    # Pretty print the solution.
    if solved:
        for i in range(num_rows):
            row = [solver.Value(squares[i, j]) for j in range(num_columns)]
            pretty_row = ["#" if filled else " " for filled in row]
            print("".join(pretty_row))
    else:
        print("No solution found")

    print("")
    print("Failures:", solver.NumConflicts())
    print("Branches:", solver.NumBranches())
    print("WallTime: {walltime}ms".format(walltime=solver.WallTime()))


ROWS_GCHQ = [
    [7, 3, 1, 1, 7],
    [1, 1, 2, 2, 1, 1],
    [1, 3, 1, 3, 1, 1, 3, 1],
    [1, 3, 1, 1, 6, 1, 3, 1],
    [1, 3, 1, 5, 2, 1, 3, 1],
    [1, 1, 2, 1, 1],
    [7, 1, 1, 1, 1, 1, 7],
    [3, 3],
    [1, 2, 3, 1, 1, 3, 1, 1, 2],
    [1, 1, 3, 2, 1, 1],
    [4, 1, 4, 2, 1, 2],
    [1, 1, 1, 1, 1, 4, 1, 3],
    [2, 1, 1, 1, 2, 5],
    [3, 2, 2, 6, 3, 1],
    [1, 9, 1, 1, 2, 1],
    [2, 1, 2, 2, 3, 1],
    [3, 1, 1, 1, 1, 5, 1],
    [1, 2, 2, 5],
    [7, 1, 2, 1, 1, 1, 3],
    [1, 1, 2, 1, 2, 2, 1],
    [1, 3, 1, 4, 5, 1],
    [1, 3, 1, 3, 10, 2],
    [1, 3, 1, 1, 6, 6],
    [1, 1, 2, 1, 1, 2],
    [7, 2, 1, 2, 5],
]

COLUMNS_GCHQ = [
    [7, 2, 1, 1, 7],
    [1, 1, 2, 2, 1, 1],
    [1, 3, 1, 3, 1, 3, 1, 3, 1],
    [1, 3, 1, 1, 5, 1, 3, 1],
    [1, 3, 1, 1, 4, 1, 3, 1],
    [1, 1, 1, 2, 1, 1],
    [7, 1, 1, 1, 1, 1, 7],
    [1, 1, 3],
    [2, 1, 2, 1, 8, 2, 1],
    [2, 2, 1, 2, 1, 1, 1, 2],
    [1, 7, 3, 2, 1],
    [1, 2, 3, 1, 1, 1, 1, 1],
    [4, 1, 1, 2, 6],
    [3, 3, 1, 1, 1, 3, 1],
    [1, 2, 5, 2, 2],
    [2, 2, 1, 1, 1, 1, 1, 2, 1],
    [1, 3, 3, 2, 1, 8, 1],
    [6, 2, 1],
    [7, 1, 4, 1, 1, 3],
    [1, 1, 1, 1, 4],
    [1, 3, 1, 3, 7, 1],
    [1, 3, 1, 1, 1, 2, 1, 1, 4],
    [1, 3, 1, 4, 3, 3],
    [1, 1, 2, 2, 2, 6, 1],
    [7, 1, 3, 2, 1, 1],
]

GIVENS_GCHQ = [
    (3, 3),
    (3, 4),
    (3, 12),
    (3, 13),
    (3, 21),
    (8, 6),
    (8, 7),
    (8, 10),
    (8, 14),
    (8, 15),
    (8, 18),
    (16, 6),
    (16, 11),
    (16, 16),
    (16, 20),
    (21, 3),
    (21, 4),
    (21, 9),
    (21, 10),
    (21, 15),
    (21, 20),
    (21, 21),
]

ROWS_200 = [
    [2, 2, 3],
    [4, 1, 1, 1, 4],
    [4, 1, 2, 1, 1],
    [4, 1, 1, 1, 1, 1, 1],
    [2, 1, 1, 2, 3, 5],
    [1, 1, 1, 1, 2, 1],
    [3, 1, 5, 1, 2],
    [3, 2, 2, 1, 2, 2],
    [2, 1, 4, 1, 1, 1, 1],
    [2, 2, 1, 2, 1, 2],
    [1, 1, 1, 3, 2, 3],
    [1, 1, 2, 7, 3],
    [1, 2, 2, 1, 5],
    [3, 2, 2, 1, 2],
    [3, 2, 1, 2],
    [5, 1, 2],
    [2, 2, 1, 2],
    [4, 2, 1, 2],
    [6, 2, 3, 2],
    [7, 4, 3, 2],
    [7, 4, 4],
    [7, 1, 4],
    [6, 1, 4],
    [4, 2, 2],
    [2, 1],
]

COLS_200 = [
    [1, 1, 2, 2],
    [5, 5, 7],
    [5, 2, 2, 9],
    [3, 2, 3, 9],
    [1, 1, 3, 2, 7],
    [3, 1, 5],
    [7, 1, 1, 1, 3],
    [1, 2, 1, 1, 2, 1],
    [4, 2, 4],
    [1, 2, 2, 2],
    [4, 6, 2],
    [1, 2, 2, 1],
    [3, 3, 2, 1],
    [4, 1, 15],
    [1, 1, 1, 3, 1, 1],
    [2, 1, 1, 2, 2, 3],
    [1, 4, 4, 1],
    [1, 4, 3, 2],
    [1, 1, 2, 2],
    [7, 2, 3, 1, 1],
    [2, 1, 1, 1, 5],
    [1, 2, 5],
    [1, 1, 1, 3],
    [4, 2, 1],
    [3],
]

ROWS_436 = [
    [2, 2],
    [2, 3, 2],
    [3, 3, 3, 2],
    [3, 3, 3, 3],
    [2, 3, 3, 3, 3, 2],
    [3, 3, 3, 3, 3, 3],
    [4, 2, 3, 2, 2, 4],
    [4, 2, 2, 2, 2, 3, 1],
    [3, 1, 2, 2, 2, 3, 3],
    [3, 2, 2, 2, 2, 2, 4],
    [3, 2, 15, 2, 4],
    [5, 19, 4],
    [6, 4, 3, 3],
    [6, 4, 4],
    [2, 4, 6, 2],
    [2, 2, 3, 3, 3, 2],
    [9, 2, 2, 2, 3, 9],
    [10, 2, 2, 2, 2, 2, 10],
    [4, 2, 3, 3, 2, 2, 3, 2, 5],
    [2, 5, 2, 4, 2],
    [5, 3, 2, 2, 5],
    [6, 3, 2, 3, 7],
    [6, 8, 9, 7],
    [4, 8, 7, 5],
    [4],
    [2],
    [2],
    [14],
    [16],
    [3, 3],
    [2, 2],
    [2, 2],
    [4, 4],
    [16],
    [12],
]

COLS_436 = [
    [1],
    [3, 2],
    [2, 3, 3],
    [3, 3, 3],
    [3, 3, 3, 3],
    [4, 2, 2, 2],
    [3, 3, 2, 3],
    [3, 2, 2, 2],
    [3, 2, 6],
    [2, 9],
    [2, 3, 3],
    [4, 4, 3, 2, 4],
    [7, 2, 5, 2, 6],
    [12, 2, 3, 2, 3, 2],
    [3, 1, 2, 2, 2, 3],
    [2, 2, 3, 2, 2, 2],
    [6, 2, 6, 2, 2, 2],
    [12, 4, 3, 2, 2],
    [12, 2, 2, 2],
    [2, 6, 2],
    [2, 6, 5, 2],
    [10, 9, 2, 2],
    [12, 3, 3, 2, 2],
    [6, 2, 2, 2, 2, 2, 2],
    [2, 2, 3, 2, 2, 2],
    [4, 3, 2, 2, 2, 3],
    [7, 3, 3, 2, 3, 2],
    [5, 3, 5, 2, 6],
    [4, 3, 3, 3, 4],
    [3, 5, 3],
    [3, 9],
    [4, 2, 6],
    [4, 2, 2, 2],
    [4, 2, 2, 3],
    [3, 2, 2, 3],
    [3, 3, 3],
    [3, 3, 3],
    [4, 3, 3],
    [2, 3, 3],
    [2, 1],
]

ROWS_TEAL = [
    [4],
    [2, 1],
    [1, 4, 2],
    [3, 2, 3, 1, 3],
    [2, 1, 2, 3, 2],
    [1, 1, 1, 6, 1, 1],
    [2, 2, 2, 2, 2, 1],
    [1, 3, 3, 2, 1],
    [2, 6, 5, 2],
    [1, 2, 5, 2],
    [3, 3, 5],
    [1, 2, 2, 2],
    [8, 1, 1],
    [1, 2, 2],
    [1, 4],
    [4, 3],
    [5, 4],
    [4, 9],
    [1, 2, 6, 1, 1],
    [7, 1],
    [5, 5, 3],
    [8, 4, 7],
    [1, 11, 5, 2],
    [1, 7, 3, 3, 2],
    [7, 12],
    [2, 4, 4],
    [2, 3],
    [2, 4],
    [5],
    [2, 5],
    [3, 4, 2, 1],
    [10, 2],
    [4, 4],
    [4],
    [2],
]

COLS_TEAL = [
    [4],
    [2, 4],
    [2, 2, 2, 1],
    [3, 2, 5],
    [2, 1, 1, 5],
    [1, 2, 2, 1, 5],
    [1, 2, 1, 2, 1, 5, 1],
    [1, 3, 1, 3, 3, 1, 1],
    [1, 4, 1, 3, 3, 1, 5],
    [2, 2, 1, 5, 1, 9],
    [1, 1, 1, 1, 1, 15],
    [1, 1, 1, 2, 2, 2, 10, 2],
    [1, 2, 2, 1, 1, 1, 7, 1, 2],
    [1, 1, 1, 1, 2, 6, 2, 2],
    [1, 2, 1, 1, 2, 5, 1, 3],
    [1, 2, 1, 4, 4, 2, 3],
    [1, 2, 2, 1, 3, 3, 3, 1, 2],
    [1, 3, 1, 6, 5, 1, 2],
    [4, 1, 1, 2, 2, 2, 2, 2, 1],
    [1, 2, 2, 1, 2, 1, 2, 2, 3],
    [1, 2, 1, 2, 1, 2, 2, 1],
    [1, 2, 5, 1, 2, 1],
    [2, 4, 4],
    [5, 1, 3],
    [2],
]

ROWS_CASTLE = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 6, 3, 1, 3],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 8, 4, 3, 1, 5],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 4, 1, 3, 5, 1, 7],
    [0, 0, 0, 0, 0, 0, 2, 2, 4, 9, 1, 5, 1, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 10, 2, 1, 8, 7, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 3, 3, 16, 1, 2],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 5, 1, 2, 4, 9, 1, 3],
    [0, 0, 0, 0, 0, 0, 0, 4, 5, 3, 14, 1, 1, 1, 1, 4, 1, 1, 3],
    [3, 3, 2, 2, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 2],
    [0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 7, 2, 1, 1, 2, 1, 1, 3, 3],
    [0, 0, 0, 0, 0, 0, 1, 5, 9, 12, 2, 1, 1, 3, 1, 1, 2, 2, 1],
    [0, 0, 3, 2, 2, 1, 1, 1, 1, 4, 1, 1, 1, 3, 3, 1, 1, 2, 2],
    [0, 0, 0, 0, 0, 0, 0, 5, 2, 2, 2, 2, 1, 5, 2, 1, 1, 2, 5],
    [0, 0, 0, 0, 0, 0, 0, 3, 5, 9, 2, 1, 1, 6, 3, 1, 3, 2, 3],
    [0, 0, 0, 0, 0, 0, 0, 1, 4, 1, 1, 1, 4, 1, 5, 5, 3, 3, 3],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 1, 1, 3, 4, 6, 6, 3],
    [0, 0, 0, 0, 0, 0, 0, 3, 1, 3, 1, 1, 3, 3, 1, 1, 4, 6, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 5, 1, 1, 3, 1, 1, 9, 4, 1],
    [0, 0, 0, 0, 0, 2, 1, 1, 7, 1, 4, 1, 1, 1, 1, 1, 1, 3, 5],
    [0, 0, 0, 0, 0, 0, 0, 0, 9, 2, 1, 3, 1, 1, 1, 1, 4, 2, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 14, 1, 1, 2, 2, 2, 10, 1, 2],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 2, 1, 2, 6, 1, 5, 3, 2],
    [0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 1, 2, 2, 3, 1, 1, 4, 3, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 3, 4, 1, 3, 2, 1, 2, 8],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 1, 3, 5, 1, 1, 1, 2, 7],
    [0, 0, 0, 0, 0, 0, 0, 4, 5, 1, 2, 5, 1, 3, 1, 1, 2, 1, 3],
    [0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 6, 2, 3, 2, 1, 1, 2, 3, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 6, 1, 5, 7, 1, 3, 3, 2, 4, 3],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 9, 1, 5, 2, 6, 2],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 2, 2, 13, 1, 3, 3, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 6, 2, 3, 3, 2, 2, 2, 1],
    [0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 12, 2, 2, 9, 2, 2, 2, 2],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 2, 4, 1, 5, 11, 2, 2],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 6, 18],
]

COLS_CASTLE = [
    [0, 0, 0, 2, 3, 1, 5, 1, 7, 1],
    [0, 0, 0, 2, 4, 2, 3, 2, 3, 5],
    [0, 0, 2, 6, 3, 1, 1, 5, 1, 5],
    [2, 4, 2, 1, 1, 1, 4, 1, 1, 2],
    [0, 0, 0, 2, 8, 2, 1, 5, 2, 5],
    [0, 0, 0, 3, 1, 6, 2, 5, 1, 5],
    [0, 3, 3, 3, 1, 1, 6, 1, 1, 1],
    [0, 3, 2, 2, 2, 2, 8, 1, 1, 3],
    [0, 0, 0, 1, 4, 4, 3, 7, 1, 1],
    [0, 0, 0, 1, 2, 2, 2, 3, 7, 9],
    [0, 0, 1, 2, 3, 1, 1, 5, 2, 2],
    [0, 0, 0, 2, 2, 3, 1, 1, 6, 1],
    [0, 0, 0, 0, 1, 3, 1, 5, 4, 1],
    [0, 0, 1, 3, 1, 1, 6, 1, 3, 1],
    [0, 0, 3, 3, 4, 5, 1, 4, 2, 1],
    [0, 0, 0, 0, 2, 3, 3, 9, 7, 1],
    [0, 0, 2, 3, 2, 2, 1, 1, 3, 5],
    [0, 0, 4, 2, 1, 1, 1, 1, 2, 3],
    [0, 0, 0, 4, 2, 2, 1, 4, 3, 2],
    [0, 0, 0, 0, 0, 0, 4, 3, 16, 2],
    [0, 0, 0, 0, 0, 1, 2, 5, 7, 1],
    [0, 0, 0, 0, 4, 3, 2, 2, 7, 1],
    [0, 0, 0, 0, 0, 2, 3, 1, 10, 1],
    [0, 0, 0, 0, 2, 4, 2, 1, 4, 1],
    [0, 0, 0, 0, 0, 1, 6, 7, 3, 1],
    [0, 0, 0, 0, 0, 0, 3, 11, 3, 1],
    [0, 0, 0, 0, 0, 7, 1, 11, 2, 1],
    [0, 0, 0, 2, 2, 2, 2, 2, 2, 2],
    [0, 0, 0, 3, 1, 1, 1, 1, 2, 1],
    [0, 0, 0, 2, 2, 2, 2, 1, 1, 1],
    [0, 0, 0, 1, 1, 1, 1, 2, 1, 2],
    [0, 0, 2, 2, 2, 2, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 4, 1, 1, 2, 2],
    [0, 0, 0, 0, 0, 5, 2, 17, 2, 1],
    [0, 0, 0, 0, 9, 2, 3, 1, 4, 2],
    [0, 0, 0, 0, 9, 4, 2, 1, 1, 1],
    [0, 0, 0, 0, 0, 5, 4, 2, 1, 4],
    [0, 0, 0, 11, 1, 2, 1, 4, 1, 2],
    [0, 0, 0, 0, 0, 3, 4, 2, 4, 4],
    [0, 0, 2, 1, 4, 1, 2, 1, 5, 2],
    [0, 0, 0, 0, 0, 8, 4, 1, 1, 2],
    [0, 0, 0, 0, 0, 1, 1, 3, 2, 3],
    [0, 0, 0, 0, 1, 3, 1, 8, 1, 6],
    [0, 0, 0, 0, 0, 0, 2, 1, 7, 14],
    [0, 0, 0, 1, 2, 4, 4, 1, 2, 3],
    [1, 1, 4, 2, 1, 1, 1, 1, 1, 4],
    [0, 0, 0, 0, 3, 5, 3, 1, 1, 4],
    [0, 0, 0, 0, 2, 4, 2, 2, 1, 2],
    [0, 0, 0, 0, 0, 4, 2, 3, 8, 4],
    [0, 0, 0, 0, 0, 4, 15, 2, 2, 4],
    [0, 0, 0, 0, 4, 1, 10, 2, 1, 2],
    [0, 0, 0, 0, 2, 12, 6, 1, 2, 4],
    [0, 0, 0, 3, 1, 3, 1, 3, 3, 4],
    [0, 0, 0, 0, 3, 1, 2, 3, 4, 1],
    [0, 0, 0, 5, 2, 2, 2, 3, 3, 3],
    [0, 1, 2, 2, 2, 2, 4, 1, 1, 3],
    [0, 0, 0, 2, 1, 4, 2, 7, 1, 1],
    [0, 0, 0, 0, 5, 2, 2, 3, 6, 3],
    [0, 0, 0, 3, 3, 2, 2, 3, 2, 3],
    [0, 0, 0, 4, 1, 2, 1, 1, 2, 1],
]

ROWS_199 = [
    [0, 0, 0, 1, 1, 4],
    [0, 0, 0, 0, 1, 6],
    [1, 1, 1, 1, 2, 3],
    [0, 0, 1, 1, 2, 3],
    [0, 0, 3, 1, 2, 3],
    [0, 0, 4, 5, 2, 2],
    [0, 0, 0, 7, 3, 2],
    [0, 0, 3, 5, 1, 2],
    [0, 0, 2, 2, 4, 1],
    [0, 0, 2, 2, 3, 4],
    [0, 0, 0, 2, 5, 2],
    [0, 0, 2, 1, 5, 1],
    [0, 0, 2, 2, 3, 1],
    [0, 0, 0, 6, 2, 2],
    [0, 0, 0, 0, 1, 7],
    [0, 0, 0, 2, 2, 2],
    [0, 0, 0, 0, 1, 4],
    [0, 0, 0, 3, 1, 1],
    [0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 1, 1],
]

COLS_199 = [
    [0, 0, 0, 6, 1],
    [0, 0, 0, 8, 3],
    [0, 0, 3, 2, 1],
    [1, 1, 2, 2, 1],
    [1, 2, 2, 1, 1],
    [0, 1, 1, 1, 1],
    [0, 0, 0, 2, 3],
    [0, 4, 1, 2, 2],
    [0, 0, 5, 2, 1],
    [0, 0, 8, 1, 1],
    [0, 0, 0, 7, 2],
    [0, 0, 3, 5, 2],
    [0, 0, 0, 2, 5],
    [0, 0, 2, 1, 4],
    [0, 2, 2, 2, 2],
    [2, 2, 1, 1, 1],
    [3, 1, 1, 1, 1],
    [0, 5, 4, 2, 1],
    [0, 7, 4, 1, 1],
    [0, 0, 0, 0, 4],
]

if __name__ == "__main__":
    solve_puzzle(ROWS_GCHQ, COLUMNS_GCHQ, GIVENS_GCHQ)
    print("")
    solve_puzzle(ROWS_TEAL, COLS_TEAL, [])
    print("")
    solve_puzzle(ROWS_200, COLS_200, [])
    print("")
    solve_puzzle(ROWS_436, COLS_436, [])
    print("")
    solve_puzzle(ROWS_CASTLE, COLS_CASTLE, [])
    print("")
    solve_puzzle(ROWS_199, COLS_199, [])
